#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from optparse import OptionParser

import os
import pwd
import grp
import spwd
from sets import Set

import pickle

import subprocess

class UserData(object):
    def __init__(self):
        self.users = {}
        self.passwords = {}
        self.groups = {}

def save(fname):
    usersave = UserData()
    
    print 'Saving users...'
    for u in pwd.getpwall():
        if u.pw_uid >= 1000 and u.pw_uid <= 2999:
            print ' - %s'%u.pw_name
            usersave.users[u.pw_name] = u
            usersave.passwords[u.pw_name] = spwd.getspnam(u.pw_name)

    userset = Set(usersave.users.keys())

    print 'Saving groups...'
    for g in grp.getgrall():
        group_userset = Set(g.gr_mem).intersection(userset)
        if (g.gr_gid >= 1000 and g.gr_gid <= 2999) or (len(group_userset) > 0):
            print ' - %s'%g.gr_name
            newg = grp.struct_group([g.gr_name, g.gr_passwd, g.gr_gid, [u for u in group_userset]])
            usersave.groups[g.gr_name] = newg

    f = open(fname,'w')
    pickle.dump(usersave, f)
    f.close()

def load(fname):
    f = open(fname,'r');
    userload = pickle.load(f)
    f.close()

    print 'Adding groups...'
    for gn,g in userload.groups.iteritems():
        print '- %s'%gn
        retcode = subprocess.call(['addgroup',gn,'--gid',str(g.gr_gid)])

    print 'Adding users...'
    for un,u in userload.users.iteritems():
        print '- %s'%un
        retcode = subprocess.call(['adduser',un,'--uid',str(u.pw_uid),'--gid',str(u.pw_gid),'--shell',u.pw_shell,'--gecos',u.pw_gecos,'--disabled-password'])
        if retcode == 0:
            retcode = subprocess.call(['usermod','-p',userload.passwords[un].sp_pwd,un])

    print 'Adding users to groups'
    for gn,g in userload.groups.iteritems():
        print " - %s"%gn
        for un in g.gr_mem:
            print "  -> %s"%un
            retcode = subprocess.call(['usermod','-a','-G',gn,un])

if __name__ == '__main__':
    commands = {'save':save, 'load':load}
    parser = OptionParser(usage="usage: pr2-usermigrate %s <filename>"%commands.keys())
    (options, args) = parser.parse_args()

    if os.getuid() != 0:
        parser.error("must be run as root")
    if os.path.exists('/etc/slave'):
        parser.error("you should not run this on c2")
    if len(args) != 2:
        parser.error("Incorrect number of arguments")
    elif (args[0] not in commands.keys()):
        parser.error("%s is an invalid command"%args[0])
    else:
        commands[args[0]](args[1])
