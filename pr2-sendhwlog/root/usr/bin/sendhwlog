#! /usr/bin/env python

"""
usage: %prog [args]
"""


# Inclusion of urllib2_file.py
########################################
########################################
########################################


####
# Version: 0.2.1
#  - StringIO workaround (Laurent Coustet), does not work with cStringIO
#
# Version: 0.2.0
#  - UTF-8 filenames are now allowed (Eli Golovinsky)
#  - File object is no more mandatory, Object only needs to have seek() read() attributes (Eli Golovinsky)
#
# Version: 0.1.0
#  - upload is now done with chunks (Adam Ambrose)
#
# Version: older
# THANKS TO:
# bug fix: kosh @T aesaeion.com
# HTTPS support : Ryan Grow <ryangrow @T yahoo.com>

# Copyright (C) 2004,2005,2006,2008,2009 Fabien SEISEN
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# you can contact me at: <fabien@seisen.org>
# http://fabien.seisen.org/python/
#
# Also modified by Adam Ambrose (aambrose @T pacbell.net) to write data in
# chunks (hardcoded to CHUNK_SIZE for now), so the entire contents of the file
# don't need to be kept in memory.
#
"""
enable to upload files using multipart/form-data

idea from:
upload files in python:
 http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/146306

timeoutsocket.py: overriding Python socket API:
 http://www.timo-tasi.org/python/timeoutsocket.py
 http://mail.python.org/pipermail/python-announce-list/2001-December/001095.html

import urllib2_files
import urllib2
u = urllib2.urlopen('http://site.com/path' [, data])

data can be a mapping object or a sequence of two-elements tuples
(like in original urllib2.urlopen())
varname still need to be a string and
value can be string of a file object
eg:
  ((varname, value),
   (varname2, value),
  )
  or
  { name:  value,
    name2: value2
  }

"""

import httplib
import mimetools
import mimetypes
import os
import os.path
import socket
import stat
import sys
import urllib
import urllib2

CHUNK_SIZE = 65536

def get_content_type(filename):
    return mimetypes.guess_type(filename)[0] or 'application/octet-stream'

# if sock is None, return the estimate size
def send_data(v_vars, v_files, boundary, sock=None):
    l = 0
    for (k, v) in v_vars:
        buffer=''
        buffer += '--%s\r\n' % boundary
        buffer += 'Content-Disposition: form-data; name="%s"\r\n' % k
        buffer += '\r\n'
        buffer += v + '\r\n'
        if sock:
            sock.send(buffer)
        l += len(buffer)
    for (k, v) in v_files:
        fd = v
        
        if not hasattr(fd, 'read'):
            raise TypeError("file descriptor MUST have read attribute")
 
        if hasattr(fd, 'fileno'):
            # a File
            name = fd.name.split(os.path.sep)[-1]
            file_size = os.fstat(fd.fileno())[stat.ST_SIZE]
            fd.seek(0)
        elif hasattr(fd, 'len'):
            # StringIO
            name = k
            file_size = fd.len
            fd.seek(0) # START
        else:
            raise TypeError("file descriptor might be File of StringIO but MUST have fileno or len attribute")

        if isinstance(name, unicode):
            name = name.encode('UTF-8')
        buffer=''
        buffer += '--%s\r\n' % boundary
        print "Sending: %s %s"%(k,name)
        buffer += 'Content-Disposition: form-data; name="%s"; filename="%s"\r\n' \
                  % (k, name)
        buffer += 'Content-Type: %s\r\n' % get_content_type(name)
        buffer += 'Content-Length: %s\r\n' % file_size
        buffer += '\r\n'

        l += len(buffer)
        if sock:
            sock.send(buffer)
            if hasattr(fd, 'seek'):
                fd.seek(0)
        # read file only of sock is defined
        if sock:
            while True:
                chunk = fd.read(CHUNK_SIZE)
                if not chunk:
                    break
                if sock:
                    sock.send(chunk)
        l += file_size
    buffer='\r\n'
    buffer += '--%s--\r\n' % boundary
    buffer += '\r\n'
    if sock:
        sock.send(buffer)
    l += len(buffer)
    return l

# mainly a copy of HTTPHandler from urllib2
class newHTTPHandler(urllib2.BaseHandler):
    def http_open(self, req):
        return self.do_open(httplib.HTTP, req)

    def do_open(self, http_class, req):
        data = req.get_data()
        v_files=[]
        v_vars=[]
        # mapping object (dict)
        if req.has_data() and type(data) != str:
            if hasattr(data, 'items'):
                data = data.items()
            else:
                try:
                    if len(data) and not isinstance(data[0], tuple):
                        raise TypeError
                except TypeError:
                    ty, va, tb = sys.exc_info()
                    raise TypeError, "not a valid non-string sequence or mapping object", tb
                
            for (k, v) in data:
                if hasattr(v, 'read'):
                    v_files.append((k, v))
                else:
                    v_vars.append( (k, v) )
        # no file ? convert to string
        if len(v_vars) > 0 and len(v_files) == 0:
            data = urllib.urlencode(v_vars)
            v_files=[]
            v_vars=[]
        host = req.get_host()
        if not host:
            raise urllib2.URLError('no host given')
        h = http_class(host) # will parse host:port
        if req.has_data():
            h.putrequest('POST', req.get_selector())
            if not 'Content-type' in req.headers:
                if len(v_files) > 0:
                    boundary = mimetools.choose_boundary()
                    l = send_data(v_vars, v_files, boundary)
                    h.putheader('Content-Type',
                                'multipart/form-data; boundary=%s' % boundary)
                    h.putheader('Content-length', str(l))
                else:
                    h.putheader('Content-type',
                                'application/x-www-form-urlencoded')
                    if not 'Content-length' in req.headers:
                        h.putheader('Content-length', '%d' % len(data))
        else:
            h.putrequest('GET', req.get_selector())

        scheme, sel = urllib.splittype(req.get_selector())
        sel_host, sel_path = urllib.splithost(sel)
        h.putheader('Host', sel_host or host)
        for name, value in self.parent.addheaders:
            name = name.capitalize()
            if name not in req.headers:
                h.putheader(name, value)
        for k, v in req.headers.items():
            h.putheader(k, v)
        # httplib will attempt to connect() here.  be prepared
        # to convert a socket error to a URLError.
        try:
            h.endheaders()
        except socket.error, err:
            raise urllib2.URLError(err)

        if req.has_data():
            if len(v_files) >0:
                l = send_data(v_vars, v_files, boundary, h)
            elif len(v_vars) > 0:
                # if data is passed as dict ...
                data = urllib.urlencode(v_vars)
                h.send(data)
            else:
                # "normal" urllib2.urlopen()
                h.send(data)

        code, msg, hdrs = h.getreply()
        fp = h.getfile()
        if code == 200:
            resp = urllib.addinfourl(fp, hdrs, req.get_full_url())
            resp.code = code
            resp.msg = msg
            return resp
        else:
            return self.parent.error('http', req, fp, code, msg, hdrs)

urllib2._old_HTTPHandler = urllib2.HTTPHandler
urllib2.HTTPHandler = newHTTPHandler

class newHTTPSHandler(newHTTPHandler):
    def https_open(self, req):
        return self.do_open(httplib.HTTPS, req)
    
urllib2.HTTPSHandler = newHTTPSHandler

########################################
########################################
########################################



import os, sys, string
from optparse import OptionParser
import subprocess
from datetime import datetime
import re
import yaml
from tarfile import *
from StringIO import *
import time
import fcntl
import errno
import shutil

VERSION = '0.1'
LOCKFILE='/var/lock/send-hwlog/lock'
HWLOG='/hwlog'

def lockFile(lockfile):
  try:
    os.makedirs(os.path.dirname(lockfile))
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise

  fp = open(lockfile, 'w')
  try:
    fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
  except IOError:
    return None
  
  return fp

def try_remove(path):
    try:
        os.rmdir(path)
    except OSError as e:
        if e.errno != errno.ENOTEMPTY:
            raise

def get_macaddress():
  m = re.search("HWaddr\s*(\S*)", subprocess.Popen(["ifconfig", "wan0"], stdout=subprocess.PIPE).communicate()[0])  
  if m is None:
    return None
  else:
    return m.group(1).replace(':','')

def in_use(file):
  return subprocess.call(['lsof', '-V', file], stdout=open('/dev/null', 'w')) == 0


def gzip(path):
  print 'Gzipping ' + path + '...'
  subprocess.check_call(['nice', 'gzip', path])


def unique_filename(file_name):
  counter = 1
  orig_file_name,orig_file_ext = os.path.splitext(file_name)
  while os.path.exists(file_name) or os.path.isfile(file_name + '.gz'): 
    file_name = orig_file_name + "-" + str(counter) + orig_file_ext
    counter += 1
  return file_name

def stage(path, stagepath):

  path_norm = os.path.normpath(path)
  stagepath_norm = os.path.normpath(stagepath)

  if stagepath_norm[0] == '/':
    raise Exception("stagepath must be relative")

  fq_stagepath = os.path.join(path_norm, stagepath_norm)

  try:
    os.makedirs(fq_stagepath)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise

  for root, dirs, files in os.walk(path_norm):
    # We skip the staging path
    if root == path_norm:
      if stagepath_norm in dirs:
        dirs.remove(stagepath_norm)
      if 'lost+found' in dirs:
        dirs.remove('lost+found')
      if 'rsync-partial' in dirs:
        dirs.remove('rsync-partial')

    hidden = []
    for d in dirs:
        if d[0] == ".":
            hidden.append(d)
    for h in hidden:
        dirs.remove(h)

    for name in files:
      # skip hidden files
      if name[0] == '.':
          continue

      fpath = os.path.join(root,name)

      frelpath = os.path.relpath(fpath, path_norm)

      # Skip this file if it is in use
      if in_use(fpath):
        continue

#      ftgtpath = os.path.join(fq_stagepath, frelpath.replace('/','__'))
      ftgtpath = unique_filename(os.path.join(fq_stagepath, frelpath))

      try:
        os.makedirs(os.path.dirname(ftgtpath))
      except OSError as e:
        if e.errno != errno.EEXIST:
          raise
      os.rename(fpath, ftgtpath)

      gzip(ftgtpath)


def cleanpath(path, stagepath):

  path_norm = os.path.normpath(path)
  stagepath_norm = os.path.normpath(stagepath)

  if stagepath_norm[0] == '/':
    raise Exception("stagepath must be relative")

  fq_stagepath = os.path.join(path_norm, stagepath_norm)

  for root, dirs, files in os.walk(path_norm):
    # We skip the staging path
    if root == path_norm:
      if stagepath_norm in dirs:
        dirs.remove(stagepath_norm)
      if 'lost+found' in dirs:
        dirs.remove('lost+found')

    hidden = []
    for d in dirs:
        if d[0] == ".":
            hidden.append(d)
    for h in hidden:
        dirs.remove(h)

    for d in dirs:
        for root_, dirs_, files_ in os.walk(os.path.join(root,d), topdown=False):
            for d_ in dirs_:
                try_remove(os.path.join(root_,d_))
        try_remove(os.path.join(root,d))

    dirs = []

def cleanstage(path, stagepath):

  path_norm = os.path.normpath(path)
  stagepath_norm = os.path.normpath(stagepath)

  if stagepath_norm[0] == '/':
    raise Exception("stagepath must be relative")

  fq_stagepath = os.path.join(path_norm, stagepath_norm)

  for root, dirs, files in os.walk(fq_stagepath, topdown=False):
    for d in dirs:
      try_remove(os.path.join(root,d))

# This is now included
#import urllib2_file
import urllib2

def sha1_hash(fn): 
  p = subprocess.Popen(["sha1sum", "-b", fn], stdout=subprocess.PIPE) 
  r,e = p.communicate() 
  sha1 = r.split()[0] 
 
  return sha1 

class RsyncSender:
  def send_dir(self, reference, path):
    subprocess.check_call([      '/usr/bin/rsync', '-xvzr', '--remove-source-files', '--partial', '--partial-dir', 'rsync-partial', '--progress', '--backup', '--suffix=%f'%(time.time()), path+'/', 'rsync://10.68.255.1/hwlog/%s/'%reference])

class Sender:
  def __init__(self, site):
    self.site = site
    self.theURL = "http://" + self.site + "/receive"

  def send(self, reference, filename, relfilename = None):
    print "sending", reference, filename

    hash = sha1_hash(filename)

    params = {"uploaded" : open(filename)}
    params['reference'] = reference
    params['hash'] = hash

    if relfilename == None:
      relfilename = filename
    
    params['filename'] = relfilename
 
    a = urllib2.urlopen(self.theURL + "/" + reference, params)
    response = a.read()

    parts = response.split()
    if len(parts) == 0: 
      print filename, "response:", response
      return False

    if parts[0] != "success": 
      print filename, "response:", response
      return False

    if int(parts[1]) != os.stat(filename).st_size:
      print filename, "file size mismatch", parts[1], os.stat(filename).st_size
      return False

    if len(parts) == 3 and parts[2] != hash: 
      print filename, "hash mismatch", parts[1], hash
      return False

    return True

  def send_dir(self, reference, path):

    for root, dirs, files in os.walk(path):
      for fn in files:
        ffn = os.path.join(root, fn)
        relffn = os.path.relpath(ffn, path)
        if not os.path.exists(ffn): continue
        if os.path.isdir(ffn): continue
        
        if self.send(reference, ffn, relffn):
          os.remove(ffn)


def main(argv, stdout, environ):

  parser = OptionParser(__doc__.strip())
  parser.add_option("--path",action="store",type="string",dest="path",default="/hwlog")
  parser.add_option("--stagepath",action="store",type="string",dest="stagepath",default="queue")
  parser.add_option("--id",action="store",type="string",dest="id",default=None)
  parser.add_option("--stageonly",action="store_true",dest="stageonly")
  parser.add_option("--wg",action="store_true",dest="wg")

#  parser.add_option("-v","--var",action="store",type="string", dest="var",default="blah")

  if (os.getuid() != 0):
    parser.error("must be run as root")

  (options, args) = parser.parse_args()

  l = lockFile(LOCKFILE)

  if l is None:
    print >> sys.stderr, "There is already an instance of send-hwlog running."
    sys.exit(1)

  id = options.id  
  if id is None:
    id = get_macaddress()
  
  if id is None:
    print >> sys.stderr, "No id specified, and could not find mac address of wan0"
    sys.exit(1)

  stage(options.path, options.stagepath)
  cleanpath(options.path, options.stagepath)

  if options.wg:
    sender = Sender('hwlogs.willowgarage.com')
  else:
    sender = RsyncSender()

  if not options.stageonly:
    sender.send_dir(id, os.path.join(options.path, options.stagepath))
    cleanstage(options.path, options.stagepath)

if __name__ == "__main__":
  main(sys.argv, sys.stdout, os.environ)
