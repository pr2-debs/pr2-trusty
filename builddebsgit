#!/usr/bin/python
# -*- coding: utf-8 -*-
#     _____
#    /  _  \
#   / _/ \  \
#  / / \_/   \
# /  \_/  _   \  ___  _    ___   ___   ____   ____   ___   _____  _   _
# \  / \_/ \  / /  _\| |  | __| / _ \ | ┌┐ \ | ┌┐ \ / _ \ |_   _|| | | |
#  \ \_/ \_/ /  | |  | |  | └─┐| |_| || └┘ / | └┘_/| |_| |  | |  | └─┘ |
#   \  \_/  /   | |_ | |_ | ┌─┘|  _  || |\ \ | |   |  _  |  | |  | ┌─┐ |
#    \_____/    \___/|___||___||_| |_||_| \_\|_|   |_| |_|  |_|  |_| |_|
#            ROBOTICS™
#
#  File: builddebsgit
#  Desc: Builds fresh debs from Git
#  Auth: Devon Ash <dash@clearpathrobotics.com>
#
#  Copyright © 2015 Clearpath Robotics, Inc. 
#  All Rights Reserved
#  
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Clearpath Robotics, Inc. nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CLEARPATH ROBOTICS, INC. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Please send comments, questions, or patches to skynet@clearpathrobotics.com
import sys
import os
import re
import subprocess
import tempfile

from termcolor import colored
from subprocess import CalledProcessError
from optparse import OptionParser
from packaging.version import Version, LegacyVersion

increment_version = False
fullauto = False
branch = "ubuntu-trusty"


# Main script that puts everything together
def build_pkgs(pkgs, new_only, manual, auto, use_git_author, increment, fa, b):

    global branch
    branch = b

    global increment_version
    increment_version = increment

    global fullauto

    fullauto = fa
    if fullauto:
        auto = False

    if manual and fullauto:
        print colored("You have specified (--manual or --auto) and --full-auto. These are incompatible. Please retry with only one of these options.", 'red')
        sys.exit(0)

    if len(pkgs) == 0:
        pkgs = os.listdir('.')
    pkgs = [p for p in pkgs if os.path.isdir(p) and p[0] != '.']

    files = os.listdir('.')
    print colored("Reading existing .deb files", 'blue')
    global made_debs
    made_debs = [deb for deb in files if os.path.isfile(deb) and deb.endswith('.deb')]
    for deb in made_debs:
        print colored("%s is already made. Skipping." %deb, 'green')

    if not manual and not auto and not fullauto:
        print "WARNING: Please specify if you want --auto, --full-auto or --manual-tag"
        sys.exit(0)


    for p in pkgs:
        p = p.strip('/')
        print colored("\nPreparing to build package: %s"%p, 'blue')
        if not package_exists(p.lower()):
            os.chdir(p)
            check_git_pull()

            versions = ()
            if manual:
                versions = do_manual_versioning()
            elif auto or fullauto:
                versions = do_auto_versioning()

            current_tag = versions[0]
            most_recent_tag = versions[1]

            current_tag = current_tag.rsplit('\n')[0]
            most_recent_tag = most_recent_tag.rsplit('\n')[0]

            commit_id = get_commit_id(current_tag)
            confirm_detected_versions(current_tag, most_recent_tag)
            new_v = is_new_version(most_recent_tag, current_tag)
            generate_changelogs(most_recent_tag, new_v, commit_id, use_git_author)
            make_package()
            os.chdir('..')

# Asks user if they want to git pull
def check_git_pull():

    if not fullauto:
        yesno = raw_input("About to invoke 'git pull.'  Continue? [Y/n]")
        if yesno.lower()=="n":
            print "Aborting..."
            sys.exit(0)
    else:
        print colored("Pulling git source down..." , 'blue')
        subprocess.check_output("git pull", shell=True)

# Determines if deb package exists in repo/directory
def package_exists(package):
    alreadymade = False
    for madedeb in made_debs:
        if madedeb.split('_')[0] == package.lower():
            print colored("%s is already made. Skipping." %package, 'green')   
            alreadymade = True
    return alreadymade

# Returns the highest release number detected from the git tags. This will help in determining if your branch/package is the most current one.
def get_most_recent_release(current_tag):
    tag_list = subprocess.check_output("git tag", shell=True)
    tag_array = tag_list.rstrip().split('\n')
    recent_release = ""
    for t in tag_array:
        if LegacyVersion(t) >= LegacyVersion(current_tag):
            recent_release = t
          
    if len(tag_array) == 0:
        return current_tag
    elif len(tag_array) == 1:
        return current_tag
    else:
        print colored("Detected recent release: %s" % recent_release, 'yellow')
        return recent_release

# Creates a new git tag given the version to create a tag of
def create_new_tag(version):
    cmd = "git tag -a %s -m 'Creation version tag %s\n'" %(version, version)
    addtag = subprocess.check_output(cmd, shell=True)
    pushtag = subprocess.check_output("git push --tags", shell=True)
    print colored("Created and pushed git tags (%s)" %version, 'blue')

# returns current github tag from git describe, or existing deb changelog if none exists for Github.
def get_current_tag():
    current_tag = ""
    try:
    # Go to nxt pkg
        current_tag = subprocess.check_output('git describe --tags', shell=True)
    except CalledProcessError as e:
        if not fullauto:
            yn = raw_input("No version tag found. Do you want to initialize a Git release from the current deb package's version? If no, this process will stop. [Y/n]?\n")
            if yn.lower() == "n":
                print "Aborting"
                sys.exit(0)
          
        debversion = subprocess.check_output("dpkg-parsechangelog --show-field Version", shell=True)
        print colored("Current detected version is %s" %debversion, 'yellow')
        debversion = debversion.rsplit('\n')[0]
        create_new_tag(debversion)
        current_tag = debversion

    current_tag = current_tag.rsplit('\n')[0]
    return current_tag

# Manually ask for current release and previous release
def do_manual_versioning():
    out = subprocess.check_output("git tag", shell=True)
    print colored("Current tag list is %s" %out, 'green')
    inp = raw_input("You specified to use the manual changelog generation. From what tag should be used for generating the changelog? [E.g 0.0.19]\n")
    current_tag = inp
    print "Current version is %s" % current_tag
    inp2 = raw_input("What tag is the current release of this package?")
    recent_release = inp2
    print "Next release will be %s" % recent_release

    current_tag = current_tag.rsplit('\n')[0]
    recent_release = recent_release.rsplit('\n')[0]
    versions = (current_tag, recent_release)
    return versions

# Increments version tag of the given version
# Supported input types:
# x.x.x
# x.x.x-word
# E.g
# 0.5.3
# 0.5.3-trusty
# 0.5.3-precise
def increment_tag_version(version):
    version = version.rsplit('.')
    versiondist = version[2].rsplit('-')
    version[2] = versiondist[0]
    versiondistname = versiondist[1]

    numtoinc = version[2]
    numtoinc = int(numtoinc) + 1
    version[2] = numtoinc
    versstring = ""
    for i, num in enumerate(version):
        if i != len(version)-1:
            versstring = str(versstring) + str(num) + "."
        else:
            if versiondistname is not None:
                versstring = str(versstring) + str(num) + "-" + versiondistname
            else:
                versstring = str(versstring) + str(num)
        
    print colored("As requested by -i/--increment, builddebsgit has increased version number to: %s " %versstring, 'red')
    return versstring


# Auto detect versions (it detects the current version via git describe and the tag prior to that one)
def do_auto_versioning():
    print colored("Auto versioning and configuration enabled.", 'yellow')
    current_tag = get_current_tag()
    current_tag = current_tag.rsplit('\n')[0]
    print colored("Current branch is on release %s" %current_tag, 'yellow')
    most_recent = get_most_recent_release(current_tag)
    print colored("Most up to date version is %s" %most_recent, 'yellow')

    if increment_version:
        most_recent = increment_tag_version(most_recent)
        create_new_tag(most_recent)
        # Create a new tag that is an increment higher than the most_recent.
        # Push the new tag
        # get the most_recent tag again
        #

    versions = (current_tag, most_recent)
    return versions

# Get the current commit_id so we know where to generate commits for the changelog from 
def get_commit_id(tag):
    command1 = "git rev-list %s" % tag
    command2 = "head -n 1"
    pipe = subprocess.Popen(command1, shell=True, stdout=subprocess.PIPE)
    commit_id = subprocess.check_output(command2, shell=True, stdin=pipe.stdout)
    print colored("Commit id of %s (the present version of the branch) is %s" %(tag, commit_id), 'yellow')
    return commit_id

# Confirm that the versions changes are made from are correct. E.g if it detects 0.5.3 and 0.5.4, do you want to includ commits from tag 0.5.3 to 0.5.4 in your debian package release?
def confirm_detected_versions(current_tag, most_recent_tag):
    if not fullauto:
        corr = raw_input("You will be including commits from version %s to %s. Is this correct? [Y/n/M]?\n" %(current_tag, most_recent_tag))
        if corr.lower()=="n":
            print colored("Aborting!", 'red')
            sys.exit(0)
        elif corr.lower()=="m":
            print colored("Manual override hasn't been implemented yet!", 'red')
            sys.exit(0)

# Check if tag a > tag b, If so, returns that tag A is the new version. Else it is not a new version
def is_new_version(tag_a, tag_b):
    print colored("Checking %s against %s and determining if new version" %(tag_a, tag_b), 'blue')
    new_v = ""
    if LegacyVersion(tag_a) > LegacyVersion(tag_b) and not (LegacyVersion(tag_a) < LegacyVersion(tag_b)) and tag_a == tag_b:
        print colored("New version detected!", 'green')
        new_v = "--new-version"
    return new_v

# Generates changelogs for this git deb package, given some parameters.
def generate_changelogs(most_recent_release, new_version, commit_id, use_git_author):
    author = ""
    if use_git_author:
        print "Using specified git author"
        author = "--git-author "
    print "Generating changelogs from Git commit %s and later\n" %commit_id
    command = "git-dch --debian-branch=%s %s --full %s %s --since=%s" %(branch, author, most_recent_release, new_version, commit_id)
    command.rstrip('\n')
    out = subprocess.check_output(command, shell=True)
    return out

# Makes debian package of current dir.
def make_package():
    print colored("...Building package...", 'blue')
    subprocess.Popen(['dpkg-buildpackage', '-uc', '-b']).wait()
    subprocess.Popen(['fakeroot', 'debian/rules', 'clean']).wait()

# Main
if __name__ == "__main__":
  parser = OptionParser(usage="usage: builddebsgit [PKG1 PKG2 ...]")
  parser.add_option("--new",action="store_true", dest="new_only",default=False)
  parser.add_option("--auto", "-a", help="Auto configure the release tags. with -a or --auto set, this script will create a changelog from the current git tag to the most recent git version tag. Please see --manual-tag to set the release specifics during the build", dest="auto", default=True, action="store_true")
  parser.add_option("--manual-tag", help="Passing in this parameter will allow you to specify from what tag to what tag's commits are included in the changelog. Use --auto if you want the most recent changes", dest="manual", default=False, action="store_true")
  parser.add_option("--use-git-author", help="Uses the git-dch --git-author option when making the debs. It pulls in the user.name and user.email from git configs", action="store_true", dest="use_git_author", default="True")
  parser.add_option("--increment", "-i" , help="Increments the version tags of all packages involved.", dest="increment", default=False, action="store_true")
  parser.add_option("--full-auto", "-f", help="Full auto, does not prompt user for anything. It runs like auto (think of auto being semi-auto), but pressing yes at every prompt and automating the build process for you.", dest="fullauto", default=False, action="store_true")
  parser.add_option("--branch", "-b", help="Specify a branch you wish to pull from", dest="branch", default="ubuntu-trusty")
  (options, args) = parser.parse_args()
  build_pkgs(args, options.new_only, options.manual, options.auto, options.use_git_author, options.increment, options.fullauto, options.branch)
